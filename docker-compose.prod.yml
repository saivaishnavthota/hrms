version: "3.9"

services:
  backend:
    build:
      context: ./Backend
      dockerfile: Dockerfile.prod
    container_name: hrms_backend_prod
    env_file:
      - .env.production
    ports:
      - "${BACKEND_PORT:-2342}:8000"
    volumes:
      - ./logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - NODE_ENV=production
      - ENVIRONMENT=production
      - PORT=8000
      - DATABASE_URL=postgresql://admin:${POSTGRES_PASSWORD}@db:5432/Nxzen
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - DEBUG=false
      - RELOAD=false
      - LOG_LEVEL=INFO
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - AZURE_CONNECTION_STRING=${AZURE_CONNECTION_STRING}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SMTP_FROM=${SMTP_FROM}
    networks:
      - hrms-prod-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  frontend:
    build:
      context: ./Frontend
      dockerfile: Dockerfile.prod
    container_name: hrms_frontend_prod
    env_file:
      - .env.production
    ports:
      - "${FRONTEND_PORT:-80}:80"
    depends_on:
      backend:
        condition: service_healthy
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=${BACKEND_URL:-http://localhost}
      - REACT_APP_ENVIRONMENT=production
    networks:
      - hrms-prod-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80/nginx-health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  db:
    image: postgres:15-alpine
    container_name: hrms_db_prod
    env_file:
      - .env.production
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: Nxzen
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "${POSTGRES_PORT:-2344}:5432"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./Backend/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - hrms-prod-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d Nxzen"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  redis:
    image: redis:7-alpine
    container_name: hrms_redis_prod
    env_file:
      - .env.production
    ports:
      - "${REDIS_PORT:-2345}:6379"
    volumes:
      - redis_data_prod:/data
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes --save 900 1 --save 300 10 --save 60 10000
    networks:
      - hrms-prod-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local

networks:
  hrms-prod-network:
    driver: bridge