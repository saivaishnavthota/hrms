version: "3.9"

services:
  backend:
    build:
      context: ./Backend
      dockerfile: Dockerfile.prod
    container_name: hrms_backend_prod
    ports:
      - "${BACKEND_PORT:-2342}:8000"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./Backend/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./logs:/app/logs
    depends_on:
      - db
      - redis
    environment:
      - NODE_ENV=production
      - ENVIRONMENT=production
      - PORT=8000
      - DATABASE_URL=postgresql://admin:${POSTGRES_PASSWORD}@db:5432/Nxzen
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - DEBUG=false
      - RELOAD=false
      - LOG_LEVEL=INFO
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - AZURE_CONNECTION_STRING=${AZURE_CONNECTION_STRING}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SMTP_FROM=${SMTP_FROM}
    networks:
      - hrms-prod-network
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ./Frontend
      dockerfile: Dockerfile.prod
    container_name: hrms_frontend_prod
    ports:
      - "${FRONTEND_PORT:-2343}:80"
    depends_on:
      - backend
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=${BACKEND_URL}
      - REACT_APP_ENVIRONMENT=production
    networks:
      - hrms-prod-network
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  db:
    image: postgres:15-alpine
    container_name: hrms_db_prod
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: Nxzen
    ports:
      - "${POSTGRES_PORT:-2344}:5432"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./Backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - hrms-prod-network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d Nxzen"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: hrms_redis_prod
    ports:
      - "${REDIS_PORT:-2345}:6379"
    volumes:
      - redis_data_prod:/data
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    command: redis-server --requirepass ${REDIS_PASSWORD}
    networks:
      - hrms-prod-network
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: hrms_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - hrms-prod-network
    restart: always

volumes:
  postgres_data_prod:
  redis_data_prod:

networks:
  hrms-prod-network:
    driver: bridge
